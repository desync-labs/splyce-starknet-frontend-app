name: CI/CD Pipeline

on:
  pull_request:
    types:
      - closed
    branches:
      - dev
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set ENV_TAG
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            echo "ENV_TAG=" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV_TAG=dev-" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_ENV=dev" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Run in bash
        shell: bash
        run: |
          echo "Branch name: ${{ github.ref_name }}"
          echo "ENV_TAG: ${{ env.ENV_TAG }}"

      - name: Set secrets
        id: set-secrets
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            {
              echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME_PROD }}" >> $GITHUB_ENV
              echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD_PROD }}" >> $GITHUB_ENV
              echo "IMAGE_REPOSITORY=${{ vars.IMAGE_REPOSITORY_PROD }}" >> $GITHUB_ENV
              echo "ARGOCD_APP_NAME=${{ vars.ARGOCD_APP_NAME_PROD }}" >> $GITHUB_ENV
              echo "ARGOCD_API_URL=${{ secrets.ARGOCD_API_URL_PROD }}" >> $GITHUB_ENV
              echo "ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN_PROD }}" >> $GITHUB_ENV
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME_DEV }}" >> $GITHUB_ENV
              echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD_DEV }}" >> $GITHUB_ENV
              echo "IMAGE_REPOSITORY=${{ vars.IMAGE_REPOSITORY_DEV }}" >> $GITHUB_ENV
              echo "ARGOCD_APP_NAME=${{ vars.ARGOCD_APP_NAME_DEV }}" >> $GITHUB_ENV
              echo "ARGOCD_API_URL=${{ secrets.ARGOCD_API_URL_DEV }}" >> $GITHUB_ENV
              echo "ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN_DEV }}" >> $GITHUB_ENV
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Docker login
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image (Production Stage)
        run: |
          docker build --target production \
            --build-arg NEXT_PUBLIC_RPC_URL_SEPOLIA=${{ vars.NEXT_PUBLIC_RPC_URL_SEPOLIA }}\
            --build-arg NEXT_PUBLIC_RPC_URL_MAINNET=${{ vars.NEXT_PUBLIC_RPC_URL_MAINNET }}\
            --build-arg NEXT_PUBLIC_ENV=${{ env.NEXT_PUBLIC_ENV }}\
            -t ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }} ${{ env.IMAGE_REPOSITORY }}:${{ env.ENV_TAG }}latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.IMAGE_REPOSITORY }}:${{ env.ENV_TAG }}latest

      - name: Sync Argo CD and wait for completion
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=10
          RETRIES=0

          until [ $RETRIES -ge $MAX_RETRIES ]
          do
            docker run --rm \
              -e ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} \
              argoproj/argocd:v2.6.15 \
              /bin/sh -c \
              "argocd app set ${{ env.ARGOCD_APP_NAME }} \
              --server ${{ env.ARGOCD_API_URL }} \
              --grpc-web \
              --parameter image.tag=${{ github.sha }} && \
              argocd app wait ${{ env.ARGOCD_APP_NAME }} \
              --server ${{ env.ARGOCD_API_URL }} \
              --grpc-web \
              --operation && \
              argocd app sync ${{ env.ARGOCD_APP_NAME }} \
              --server ${{ env.ARGOCD_API_URL }} \
              --grpc-web \
              --timeout 180" && break

            RETRIES=$((RETRIES+1))
            echo "Retrying... ($RETRIES/$MAX_RETRIES)"
            sleep $RETRY_DELAY
          done

          if [ $RETRIES -eq $MAX_RETRIES ]; then
            echo "Failed to sync after $MAX_RETRIES attempts"
            exit 1
          fi
